//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace AzlegSoapTest.LegService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LegServiceSoap", Namespace="http://azleg.gov/webservices/")]
    public partial class LegService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private SOAPLegServiceHeader sOAPLegServiceHeaderValueField;
        
        private System.Threading.SendOrPostCallback CommitteeActionsQualifiedOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitteeActionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitteeByLegislatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitteeByLegBodyOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitteeByLegTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitteeByLegTypeBodyOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitteeByLegIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitteeMembersOperationCompleted;
        
        private System.Threading.SendOrPostCallback MemberCommitteesOperationCompleted;
        
        private System.Threading.SendOrPostCallback FloorVotesBySessionIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback FloorVotesByBillOperationCompleted;
        
        private System.Threading.SendOrPostCallback FloorVotesFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback FloorVotesFromDateToDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback FloorVotesByCommIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback FloorVotesByBillFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback StandingBySessionIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback StandingByCommitteeOperationCompleted;
        
        private System.Threading.SendOrPostCallback StandingByBillNumOperationCompleted;
        
        private System.Threading.SendOrPostCallback StandingFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback StandingByCommFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback StandingVoteFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback StandingVoteFromDateToDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback StandingVoteForBillNumOperationCompleted;
        
        private System.Threading.SendOrPostCallback StandingVoteForCommIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback StandingVoteForCommIDOnDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback BillInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback BillsBySessionIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback BillsUpdatedOperationCompleted;
        
        private System.Threading.SendOrPostCallback SponsoredBillsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AgendaBySessionIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback AgendaByCommitteeIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback AgendaByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback AgendaByCommitteeIDFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback AgendaBySessionIDFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SessionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SessionsbyIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestToSpeakBySessionIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestToSpeakBySessionIDFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestToSpeakBetweenDatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ForAgainstNeutralBySessionIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ForAgainstNeutralBySessionIDFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ForAgainstNeutralBetweenDatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback MembersBySessionIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback MemberByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalendarsBySessionIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalendarsByCommitteeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalendarsByBodyOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalendarsFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalendarsByCalendarIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback DocumentsBySessionIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback DocumentsByBillNumOperationCompleted;
        
        private System.Threading.SendOrPostCallback DocumentsByBillNumFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DocumentsFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DocumentsFromDateToDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DocumentsByDocTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DocumentsByBillNumDocTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ARSOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LegService() {
            this.Url = global::AzlegSoapTest.Properties.Settings.Default.AzlegSoapTest_LegService_LegService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public SOAPLegServiceHeader SOAPLegServiceHeaderValue {
            get {
                return this.sOAPLegServiceHeaderValueField;
            }
            set {
                this.sOAPLegServiceHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CommitteeActionsQualifiedCompletedEventHandler CommitteeActionsQualifiedCompleted;
        
        /// <remarks/>
        public event CommitteeActionsCompletedEventHandler CommitteeActionsCompleted;
        
        /// <remarks/>
        public event CommitteeByLegislatureCompletedEventHandler CommitteeByLegislatureCompleted;
        
        /// <remarks/>
        public event CommitteeByLegBodyCompletedEventHandler CommitteeByLegBodyCompleted;
        
        /// <remarks/>
        public event CommitteeByLegTypeCompletedEventHandler CommitteeByLegTypeCompleted;
        
        /// <remarks/>
        public event CommitteeByLegTypeBodyCompletedEventHandler CommitteeByLegTypeBodyCompleted;
        
        /// <remarks/>
        public event CommitteeByLegIDCompletedEventHandler CommitteeByLegIDCompleted;
        
        /// <remarks/>
        public event CommitteeMembersCompletedEventHandler CommitteeMembersCompleted;
        
        /// <remarks/>
        public event MemberCommitteesCompletedEventHandler MemberCommitteesCompleted;
        
        /// <remarks/>
        public event FloorVotesBySessionIDCompletedEventHandler FloorVotesBySessionIDCompleted;
        
        /// <remarks/>
        public event FloorVotesByBillCompletedEventHandler FloorVotesByBillCompleted;
        
        /// <remarks/>
        public event FloorVotesFromDateCompletedEventHandler FloorVotesFromDateCompleted;
        
        /// <remarks/>
        public event FloorVotesFromDateToDateCompletedEventHandler FloorVotesFromDateToDateCompleted;
        
        /// <remarks/>
        public event FloorVotesByCommIDCompletedEventHandler FloorVotesByCommIDCompleted;
        
        /// <remarks/>
        public event FloorVotesByBillFromDateCompletedEventHandler FloorVotesByBillFromDateCompleted;
        
        /// <remarks/>
        public event StandingBySessionIDCompletedEventHandler StandingBySessionIDCompleted;
        
        /// <remarks/>
        public event StandingByCommitteeCompletedEventHandler StandingByCommitteeCompleted;
        
        /// <remarks/>
        public event StandingByBillNumCompletedEventHandler StandingByBillNumCompleted;
        
        /// <remarks/>
        public event StandingFromDateCompletedEventHandler StandingFromDateCompleted;
        
        /// <remarks/>
        public event StandingByCommFromDateCompletedEventHandler StandingByCommFromDateCompleted;
        
        /// <remarks/>
        public event StandingVoteFromDateCompletedEventHandler StandingVoteFromDateCompleted;
        
        /// <remarks/>
        public event StandingVoteFromDateToDateCompletedEventHandler StandingVoteFromDateToDateCompleted;
        
        /// <remarks/>
        public event StandingVoteForBillNumCompletedEventHandler StandingVoteForBillNumCompleted;
        
        /// <remarks/>
        public event StandingVoteForCommIDCompletedEventHandler StandingVoteForCommIDCompleted;
        
        /// <remarks/>
        public event StandingVoteForCommIDOnDateCompletedEventHandler StandingVoteForCommIDOnDateCompleted;
        
        /// <remarks/>
        public event BillInfoCompletedEventHandler BillInfoCompleted;
        
        /// <remarks/>
        public event BillsBySessionIDCompletedEventHandler BillsBySessionIDCompleted;
        
        /// <remarks/>
        public event BillsUpdatedCompletedEventHandler BillsUpdatedCompleted;
        
        /// <remarks/>
        public event SponsoredBillsCompletedEventHandler SponsoredBillsCompleted;
        
        /// <remarks/>
        public event AgendaBySessionIDCompletedEventHandler AgendaBySessionIDCompleted;
        
        /// <remarks/>
        public event AgendaByCommitteeIDCompletedEventHandler AgendaByCommitteeIDCompleted;
        
        /// <remarks/>
        public event AgendaByIDCompletedEventHandler AgendaByIDCompleted;
        
        /// <remarks/>
        public event AgendaByCommitteeIDFromDateCompletedEventHandler AgendaByCommitteeIDFromDateCompleted;
        
        /// <remarks/>
        public event AgendaBySessionIDFromDateCompletedEventHandler AgendaBySessionIDFromDateCompleted;
        
        /// <remarks/>
        public event SessionsCompletedEventHandler SessionsCompleted;
        
        /// <remarks/>
        public event SessionsbyIDCompletedEventHandler SessionsbyIDCompleted;
        
        /// <remarks/>
        public event RequestToSpeakBySessionIDCompletedEventHandler RequestToSpeakBySessionIDCompleted;
        
        /// <remarks/>
        public event RequestToSpeakBySessionIDFromDateCompletedEventHandler RequestToSpeakBySessionIDFromDateCompleted;
        
        /// <remarks/>
        public event RequestToSpeakBetweenDatesCompletedEventHandler RequestToSpeakBetweenDatesCompleted;
        
        /// <remarks/>
        public event ForAgainstNeutralBySessionIDCompletedEventHandler ForAgainstNeutralBySessionIDCompleted;
        
        /// <remarks/>
        public event ForAgainstNeutralBySessionIDFromDateCompletedEventHandler ForAgainstNeutralBySessionIDFromDateCompleted;
        
        /// <remarks/>
        public event ForAgainstNeutralBetweenDatesCompletedEventHandler ForAgainstNeutralBetweenDatesCompleted;
        
        /// <remarks/>
        public event MembersBySessionIDCompletedEventHandler MembersBySessionIDCompleted;
        
        /// <remarks/>
        public event MemberByIDCompletedEventHandler MemberByIDCompleted;
        
        /// <remarks/>
        public event CalendarsBySessionIDCompletedEventHandler CalendarsBySessionIDCompleted;
        
        /// <remarks/>
        public event CalendarsByCommitteeCompletedEventHandler CalendarsByCommitteeCompleted;
        
        /// <remarks/>
        public event CalendarsByBodyCompletedEventHandler CalendarsByBodyCompleted;
        
        /// <remarks/>
        public event CalendarsFromDateCompletedEventHandler CalendarsFromDateCompleted;
        
        /// <remarks/>
        public event CalendarsByCalendarIDCompletedEventHandler CalendarsByCalendarIDCompleted;
        
        /// <remarks/>
        public event DocumentsBySessionIDCompletedEventHandler DocumentsBySessionIDCompleted;
        
        /// <remarks/>
        public event DocumentsByBillNumCompletedEventHandler DocumentsByBillNumCompleted;
        
        /// <remarks/>
        public event DocumentsByBillNumFromDateCompletedEventHandler DocumentsByBillNumFromDateCompleted;
        
        /// <remarks/>
        public event DocumentsFromDateCompletedEventHandler DocumentsFromDateCompleted;
        
        /// <remarks/>
        public event DocumentsFromDateToDateCompletedEventHandler DocumentsFromDateToDateCompleted;
        
        /// <remarks/>
        public event DocumentsByDocTypeCompletedEventHandler DocumentsByDocTypeCompleted;
        
        /// <remarks/>
        public event DocumentsByBillNumDocTypeCompletedEventHandler DocumentsByBillNumDocTypeCompleted;
        
        /// <remarks/>
        public event ARSCompletedEventHandler ARSCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/CommitteeActionsQualified", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CommitteeActionsQualified(string Body, string CommitteeType) {
            object[] results = this.Invoke("CommitteeActionsQualified", new object[] {
                        Body,
                        CommitteeType});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CommitteeActionsQualifiedAsync(string Body, string CommitteeType) {
            this.CommitteeActionsQualifiedAsync(Body, CommitteeType, null);
        }
        
        /// <remarks/>
        public void CommitteeActionsQualifiedAsync(string Body, string CommitteeType, object userState) {
            if ((this.CommitteeActionsQualifiedOperationCompleted == null)) {
                this.CommitteeActionsQualifiedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitteeActionsQualifiedOperationCompleted);
            }
            this.InvokeAsync("CommitteeActionsQualified", new object[] {
                        Body,
                        CommitteeType}, this.CommitteeActionsQualifiedOperationCompleted, userState);
        }
        
        private void OnCommitteeActionsQualifiedOperationCompleted(object arg) {
            if ((this.CommitteeActionsQualifiedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitteeActionsQualifiedCompleted(this, new CommitteeActionsQualifiedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/CommitteeActions", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CommitteeActions() {
            object[] results = this.Invoke("CommitteeActions", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CommitteeActionsAsync() {
            this.CommitteeActionsAsync(null);
        }
        
        /// <remarks/>
        public void CommitteeActionsAsync(object userState) {
            if ((this.CommitteeActionsOperationCompleted == null)) {
                this.CommitteeActionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitteeActionsOperationCompleted);
            }
            this.InvokeAsync("CommitteeActions", new object[0], this.CommitteeActionsOperationCompleted, userState);
        }
        
        private void OnCommitteeActionsOperationCompleted(object arg) {
            if ((this.CommitteeActionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitteeActionsCompleted(this, new CommitteeActionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/CommitteeByLegislature", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CommitteeByLegislature(int Legislature) {
            object[] results = this.Invoke("CommitteeByLegislature", new object[] {
                        Legislature});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CommitteeByLegislatureAsync(int Legislature) {
            this.CommitteeByLegislatureAsync(Legislature, null);
        }
        
        /// <remarks/>
        public void CommitteeByLegislatureAsync(int Legislature, object userState) {
            if ((this.CommitteeByLegislatureOperationCompleted == null)) {
                this.CommitteeByLegislatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitteeByLegislatureOperationCompleted);
            }
            this.InvokeAsync("CommitteeByLegislature", new object[] {
                        Legislature}, this.CommitteeByLegislatureOperationCompleted, userState);
        }
        
        private void OnCommitteeByLegislatureOperationCompleted(object arg) {
            if ((this.CommitteeByLegislatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitteeByLegislatureCompleted(this, new CommitteeByLegislatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/CommitteeByLegBody", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CommitteeByLegBody(int Legislature, string Body) {
            object[] results = this.Invoke("CommitteeByLegBody", new object[] {
                        Legislature,
                        Body});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CommitteeByLegBodyAsync(int Legislature, string Body) {
            this.CommitteeByLegBodyAsync(Legislature, Body, null);
        }
        
        /// <remarks/>
        public void CommitteeByLegBodyAsync(int Legislature, string Body, object userState) {
            if ((this.CommitteeByLegBodyOperationCompleted == null)) {
                this.CommitteeByLegBodyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitteeByLegBodyOperationCompleted);
            }
            this.InvokeAsync("CommitteeByLegBody", new object[] {
                        Legislature,
                        Body}, this.CommitteeByLegBodyOperationCompleted, userState);
        }
        
        private void OnCommitteeByLegBodyOperationCompleted(object arg) {
            if ((this.CommitteeByLegBodyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitteeByLegBodyCompleted(this, new CommitteeByLegBodyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/CommitteeByLegType", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CommitteeByLegType(int Legislature, string CommitteeType) {
            object[] results = this.Invoke("CommitteeByLegType", new object[] {
                        Legislature,
                        CommitteeType});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CommitteeByLegTypeAsync(int Legislature, string CommitteeType) {
            this.CommitteeByLegTypeAsync(Legislature, CommitteeType, null);
        }
        
        /// <remarks/>
        public void CommitteeByLegTypeAsync(int Legislature, string CommitteeType, object userState) {
            if ((this.CommitteeByLegTypeOperationCompleted == null)) {
                this.CommitteeByLegTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitteeByLegTypeOperationCompleted);
            }
            this.InvokeAsync("CommitteeByLegType", new object[] {
                        Legislature,
                        CommitteeType}, this.CommitteeByLegTypeOperationCompleted, userState);
        }
        
        private void OnCommitteeByLegTypeOperationCompleted(object arg) {
            if ((this.CommitteeByLegTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitteeByLegTypeCompleted(this, new CommitteeByLegTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/CommitteeByLegTypeBody", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CommitteeByLegTypeBody(int Legislature, string CommitteeType, string Body) {
            object[] results = this.Invoke("CommitteeByLegTypeBody", new object[] {
                        Legislature,
                        CommitteeType,
                        Body});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CommitteeByLegTypeBodyAsync(int Legislature, string CommitteeType, string Body) {
            this.CommitteeByLegTypeBodyAsync(Legislature, CommitteeType, Body, null);
        }
        
        /// <remarks/>
        public void CommitteeByLegTypeBodyAsync(int Legislature, string CommitteeType, string Body, object userState) {
            if ((this.CommitteeByLegTypeBodyOperationCompleted == null)) {
                this.CommitteeByLegTypeBodyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitteeByLegTypeBodyOperationCompleted);
            }
            this.InvokeAsync("CommitteeByLegTypeBody", new object[] {
                        Legislature,
                        CommitteeType,
                        Body}, this.CommitteeByLegTypeBodyOperationCompleted, userState);
        }
        
        private void OnCommitteeByLegTypeBodyOperationCompleted(object arg) {
            if ((this.CommitteeByLegTypeBodyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitteeByLegTypeBodyCompleted(this, new CommitteeByLegTypeBodyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/CommitteeByLegID", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CommitteeByLegID(int Legislature, int CommitteeID) {
            object[] results = this.Invoke("CommitteeByLegID", new object[] {
                        Legislature,
                        CommitteeID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CommitteeByLegIDAsync(int Legislature, int CommitteeID) {
            this.CommitteeByLegIDAsync(Legislature, CommitteeID, null);
        }
        
        /// <remarks/>
        public void CommitteeByLegIDAsync(int Legislature, int CommitteeID, object userState) {
            if ((this.CommitteeByLegIDOperationCompleted == null)) {
                this.CommitteeByLegIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitteeByLegIDOperationCompleted);
            }
            this.InvokeAsync("CommitteeByLegID", new object[] {
                        Legislature,
                        CommitteeID}, this.CommitteeByLegIDOperationCompleted, userState);
        }
        
        private void OnCommitteeByLegIDOperationCompleted(object arg) {
            if ((this.CommitteeByLegIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitteeByLegIDCompleted(this, new CommitteeByLegIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/CommitteeMembers", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CommitteeMembers(int SessionID, int CommitteeID) {
            object[] results = this.Invoke("CommitteeMembers", new object[] {
                        SessionID,
                        CommitteeID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CommitteeMembersAsync(int SessionID, int CommitteeID) {
            this.CommitteeMembersAsync(SessionID, CommitteeID, null);
        }
        
        /// <remarks/>
        public void CommitteeMembersAsync(int SessionID, int CommitteeID, object userState) {
            if ((this.CommitteeMembersOperationCompleted == null)) {
                this.CommitteeMembersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitteeMembersOperationCompleted);
            }
            this.InvokeAsync("CommitteeMembers", new object[] {
                        SessionID,
                        CommitteeID}, this.CommitteeMembersOperationCompleted, userState);
        }
        
        private void OnCommitteeMembersOperationCompleted(object arg) {
            if ((this.CommitteeMembersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitteeMembersCompleted(this, new CommitteeMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/MemberCommittees", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode MemberCommittees(int SessionID, int MemberID) {
            object[] results = this.Invoke("MemberCommittees", new object[] {
                        SessionID,
                        MemberID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void MemberCommitteesAsync(int SessionID, int MemberID) {
            this.MemberCommitteesAsync(SessionID, MemberID, null);
        }
        
        /// <remarks/>
        public void MemberCommitteesAsync(int SessionID, int MemberID, object userState) {
            if ((this.MemberCommitteesOperationCompleted == null)) {
                this.MemberCommitteesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMemberCommitteesOperationCompleted);
            }
            this.InvokeAsync("MemberCommittees", new object[] {
                        SessionID,
                        MemberID}, this.MemberCommitteesOperationCompleted, userState);
        }
        
        private void OnMemberCommitteesOperationCompleted(object arg) {
            if ((this.MemberCommitteesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MemberCommitteesCompleted(this, new MemberCommitteesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/FloorVotesBySessionID", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode FloorVotesBySessionID(int SessionID) {
            object[] results = this.Invoke("FloorVotesBySessionID", new object[] {
                        SessionID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void FloorVotesBySessionIDAsync(int SessionID) {
            this.FloorVotesBySessionIDAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void FloorVotesBySessionIDAsync(int SessionID, object userState) {
            if ((this.FloorVotesBySessionIDOperationCompleted == null)) {
                this.FloorVotesBySessionIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFloorVotesBySessionIDOperationCompleted);
            }
            this.InvokeAsync("FloorVotesBySessionID", new object[] {
                        SessionID}, this.FloorVotesBySessionIDOperationCompleted, userState);
        }
        
        private void OnFloorVotesBySessionIDOperationCompleted(object arg) {
            if ((this.FloorVotesBySessionIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FloorVotesBySessionIDCompleted(this, new FloorVotesBySessionIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/FloorVotesByBill", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode FloorVotesByBill(int SessionID, string BillNum) {
            object[] results = this.Invoke("FloorVotesByBill", new object[] {
                        SessionID,
                        BillNum});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void FloorVotesByBillAsync(int SessionID, string BillNum) {
            this.FloorVotesByBillAsync(SessionID, BillNum, null);
        }
        
        /// <remarks/>
        public void FloorVotesByBillAsync(int SessionID, string BillNum, object userState) {
            if ((this.FloorVotesByBillOperationCompleted == null)) {
                this.FloorVotesByBillOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFloorVotesByBillOperationCompleted);
            }
            this.InvokeAsync("FloorVotesByBill", new object[] {
                        SessionID,
                        BillNum}, this.FloorVotesByBillOperationCompleted, userState);
        }
        
        private void OnFloorVotesByBillOperationCompleted(object arg) {
            if ((this.FloorVotesByBillCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FloorVotesByBillCompleted(this, new FloorVotesByBillCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/FloorVotesFromDate", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode FloorVotesFromDate(int SessionID, string StartDate) {
            object[] results = this.Invoke("FloorVotesFromDate", new object[] {
                        SessionID,
                        StartDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void FloorVotesFromDateAsync(int SessionID, string StartDate) {
            this.FloorVotesFromDateAsync(SessionID, StartDate, null);
        }
        
        /// <remarks/>
        public void FloorVotesFromDateAsync(int SessionID, string StartDate, object userState) {
            if ((this.FloorVotesFromDateOperationCompleted == null)) {
                this.FloorVotesFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFloorVotesFromDateOperationCompleted);
            }
            this.InvokeAsync("FloorVotesFromDate", new object[] {
                        SessionID,
                        StartDate}, this.FloorVotesFromDateOperationCompleted, userState);
        }
        
        private void OnFloorVotesFromDateOperationCompleted(object arg) {
            if ((this.FloorVotesFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FloorVotesFromDateCompleted(this, new FloorVotesFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/FloorVotesFromDateToDate", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode FloorVotesFromDateToDate(int SessionID, string StartDate, string EndDate) {
            object[] results = this.Invoke("FloorVotesFromDateToDate", new object[] {
                        SessionID,
                        StartDate,
                        EndDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void FloorVotesFromDateToDateAsync(int SessionID, string StartDate, string EndDate) {
            this.FloorVotesFromDateToDateAsync(SessionID, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void FloorVotesFromDateToDateAsync(int SessionID, string StartDate, string EndDate, object userState) {
            if ((this.FloorVotesFromDateToDateOperationCompleted == null)) {
                this.FloorVotesFromDateToDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFloorVotesFromDateToDateOperationCompleted);
            }
            this.InvokeAsync("FloorVotesFromDateToDate", new object[] {
                        SessionID,
                        StartDate,
                        EndDate}, this.FloorVotesFromDateToDateOperationCompleted, userState);
        }
        
        private void OnFloorVotesFromDateToDateOperationCompleted(object arg) {
            if ((this.FloorVotesFromDateToDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FloorVotesFromDateToDateCompleted(this, new FloorVotesFromDateToDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/FloorVotesByCommID", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode FloorVotesByCommID(int SessionID, int CommitteeID) {
            object[] results = this.Invoke("FloorVotesByCommID", new object[] {
                        SessionID,
                        CommitteeID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void FloorVotesByCommIDAsync(int SessionID, int CommitteeID) {
            this.FloorVotesByCommIDAsync(SessionID, CommitteeID, null);
        }
        
        /// <remarks/>
        public void FloorVotesByCommIDAsync(int SessionID, int CommitteeID, object userState) {
            if ((this.FloorVotesByCommIDOperationCompleted == null)) {
                this.FloorVotesByCommIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFloorVotesByCommIDOperationCompleted);
            }
            this.InvokeAsync("FloorVotesByCommID", new object[] {
                        SessionID,
                        CommitteeID}, this.FloorVotesByCommIDOperationCompleted, userState);
        }
        
        private void OnFloorVotesByCommIDOperationCompleted(object arg) {
            if ((this.FloorVotesByCommIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FloorVotesByCommIDCompleted(this, new FloorVotesByCommIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/FloorVotesByBillFromDate", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode FloorVotesByBillFromDate(int SessionID, string BillNum, string StartDate) {
            object[] results = this.Invoke("FloorVotesByBillFromDate", new object[] {
                        SessionID,
                        BillNum,
                        StartDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void FloorVotesByBillFromDateAsync(int SessionID, string BillNum, string StartDate) {
            this.FloorVotesByBillFromDateAsync(SessionID, BillNum, StartDate, null);
        }
        
        /// <remarks/>
        public void FloorVotesByBillFromDateAsync(int SessionID, string BillNum, string StartDate, object userState) {
            if ((this.FloorVotesByBillFromDateOperationCompleted == null)) {
                this.FloorVotesByBillFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFloorVotesByBillFromDateOperationCompleted);
            }
            this.InvokeAsync("FloorVotesByBillFromDate", new object[] {
                        SessionID,
                        BillNum,
                        StartDate}, this.FloorVotesByBillFromDateOperationCompleted, userState);
        }
        
        private void OnFloorVotesByBillFromDateOperationCompleted(object arg) {
            if ((this.FloorVotesByBillFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FloorVotesByBillFromDateCompleted(this, new FloorVotesByBillFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/StandingBySessionID", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode StandingBySessionID(int SessionID) {
            object[] results = this.Invoke("StandingBySessionID", new object[] {
                        SessionID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void StandingBySessionIDAsync(int SessionID) {
            this.StandingBySessionIDAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void StandingBySessionIDAsync(int SessionID, object userState) {
            if ((this.StandingBySessionIDOperationCompleted == null)) {
                this.StandingBySessionIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStandingBySessionIDOperationCompleted);
            }
            this.InvokeAsync("StandingBySessionID", new object[] {
                        SessionID}, this.StandingBySessionIDOperationCompleted, userState);
        }
        
        private void OnStandingBySessionIDOperationCompleted(object arg) {
            if ((this.StandingBySessionIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StandingBySessionIDCompleted(this, new StandingBySessionIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/StandingByCommittee", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode StandingByCommittee(int SessionID, int CommitteeID) {
            object[] results = this.Invoke("StandingByCommittee", new object[] {
                        SessionID,
                        CommitteeID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void StandingByCommitteeAsync(int SessionID, int CommitteeID) {
            this.StandingByCommitteeAsync(SessionID, CommitteeID, null);
        }
        
        /// <remarks/>
        public void StandingByCommitteeAsync(int SessionID, int CommitteeID, object userState) {
            if ((this.StandingByCommitteeOperationCompleted == null)) {
                this.StandingByCommitteeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStandingByCommitteeOperationCompleted);
            }
            this.InvokeAsync("StandingByCommittee", new object[] {
                        SessionID,
                        CommitteeID}, this.StandingByCommitteeOperationCompleted, userState);
        }
        
        private void OnStandingByCommitteeOperationCompleted(object arg) {
            if ((this.StandingByCommitteeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StandingByCommitteeCompleted(this, new StandingByCommitteeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/StandingByBillNum", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode StandingByBillNum(int SessionID, string BillNum) {
            object[] results = this.Invoke("StandingByBillNum", new object[] {
                        SessionID,
                        BillNum});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void StandingByBillNumAsync(int SessionID, string BillNum) {
            this.StandingByBillNumAsync(SessionID, BillNum, null);
        }
        
        /// <remarks/>
        public void StandingByBillNumAsync(int SessionID, string BillNum, object userState) {
            if ((this.StandingByBillNumOperationCompleted == null)) {
                this.StandingByBillNumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStandingByBillNumOperationCompleted);
            }
            this.InvokeAsync("StandingByBillNum", new object[] {
                        SessionID,
                        BillNum}, this.StandingByBillNumOperationCompleted, userState);
        }
        
        private void OnStandingByBillNumOperationCompleted(object arg) {
            if ((this.StandingByBillNumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StandingByBillNumCompleted(this, new StandingByBillNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/StandingFromDate", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode StandingFromDate(int SessionID, string StartDate) {
            object[] results = this.Invoke("StandingFromDate", new object[] {
                        SessionID,
                        StartDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void StandingFromDateAsync(int SessionID, string StartDate) {
            this.StandingFromDateAsync(SessionID, StartDate, null);
        }
        
        /// <remarks/>
        public void StandingFromDateAsync(int SessionID, string StartDate, object userState) {
            if ((this.StandingFromDateOperationCompleted == null)) {
                this.StandingFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStandingFromDateOperationCompleted);
            }
            this.InvokeAsync("StandingFromDate", new object[] {
                        SessionID,
                        StartDate}, this.StandingFromDateOperationCompleted, userState);
        }
        
        private void OnStandingFromDateOperationCompleted(object arg) {
            if ((this.StandingFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StandingFromDateCompleted(this, new StandingFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/StandingByCommFromDate", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode StandingByCommFromDate(int SessionID, int CommitteeID, string StartDate) {
            object[] results = this.Invoke("StandingByCommFromDate", new object[] {
                        SessionID,
                        CommitteeID,
                        StartDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void StandingByCommFromDateAsync(int SessionID, int CommitteeID, string StartDate) {
            this.StandingByCommFromDateAsync(SessionID, CommitteeID, StartDate, null);
        }
        
        /// <remarks/>
        public void StandingByCommFromDateAsync(int SessionID, int CommitteeID, string StartDate, object userState) {
            if ((this.StandingByCommFromDateOperationCompleted == null)) {
                this.StandingByCommFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStandingByCommFromDateOperationCompleted);
            }
            this.InvokeAsync("StandingByCommFromDate", new object[] {
                        SessionID,
                        CommitteeID,
                        StartDate}, this.StandingByCommFromDateOperationCompleted, userState);
        }
        
        private void OnStandingByCommFromDateOperationCompleted(object arg) {
            if ((this.StandingByCommFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StandingByCommFromDateCompleted(this, new StandingByCommFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/StandingVoteFromDate", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode StandingVoteFromDate(int SessionID, string StartDate) {
            object[] results = this.Invoke("StandingVoteFromDate", new object[] {
                        SessionID,
                        StartDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void StandingVoteFromDateAsync(int SessionID, string StartDate) {
            this.StandingVoteFromDateAsync(SessionID, StartDate, null);
        }
        
        /// <remarks/>
        public void StandingVoteFromDateAsync(int SessionID, string StartDate, object userState) {
            if ((this.StandingVoteFromDateOperationCompleted == null)) {
                this.StandingVoteFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStandingVoteFromDateOperationCompleted);
            }
            this.InvokeAsync("StandingVoteFromDate", new object[] {
                        SessionID,
                        StartDate}, this.StandingVoteFromDateOperationCompleted, userState);
        }
        
        private void OnStandingVoteFromDateOperationCompleted(object arg) {
            if ((this.StandingVoteFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StandingVoteFromDateCompleted(this, new StandingVoteFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/StandingVoteFromDateToDate", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode StandingVoteFromDateToDate(int SessionID, string StartDate, string EndDate) {
            object[] results = this.Invoke("StandingVoteFromDateToDate", new object[] {
                        SessionID,
                        StartDate,
                        EndDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void StandingVoteFromDateToDateAsync(int SessionID, string StartDate, string EndDate) {
            this.StandingVoteFromDateToDateAsync(SessionID, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void StandingVoteFromDateToDateAsync(int SessionID, string StartDate, string EndDate, object userState) {
            if ((this.StandingVoteFromDateToDateOperationCompleted == null)) {
                this.StandingVoteFromDateToDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStandingVoteFromDateToDateOperationCompleted);
            }
            this.InvokeAsync("StandingVoteFromDateToDate", new object[] {
                        SessionID,
                        StartDate,
                        EndDate}, this.StandingVoteFromDateToDateOperationCompleted, userState);
        }
        
        private void OnStandingVoteFromDateToDateOperationCompleted(object arg) {
            if ((this.StandingVoteFromDateToDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StandingVoteFromDateToDateCompleted(this, new StandingVoteFromDateToDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/StandingVoteForBillNum", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode StandingVoteForBillNum(int SessionID, string BillNum) {
            object[] results = this.Invoke("StandingVoteForBillNum", new object[] {
                        SessionID,
                        BillNum});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void StandingVoteForBillNumAsync(int SessionID, string BillNum) {
            this.StandingVoteForBillNumAsync(SessionID, BillNum, null);
        }
        
        /// <remarks/>
        public void StandingVoteForBillNumAsync(int SessionID, string BillNum, object userState) {
            if ((this.StandingVoteForBillNumOperationCompleted == null)) {
                this.StandingVoteForBillNumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStandingVoteForBillNumOperationCompleted);
            }
            this.InvokeAsync("StandingVoteForBillNum", new object[] {
                        SessionID,
                        BillNum}, this.StandingVoteForBillNumOperationCompleted, userState);
        }
        
        private void OnStandingVoteForBillNumOperationCompleted(object arg) {
            if ((this.StandingVoteForBillNumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StandingVoteForBillNumCompleted(this, new StandingVoteForBillNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/StandingVoteForCommID", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode StandingVoteForCommID(int SessionID, int CommitteeID) {
            object[] results = this.Invoke("StandingVoteForCommID", new object[] {
                        SessionID,
                        CommitteeID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void StandingVoteForCommIDAsync(int SessionID, int CommitteeID) {
            this.StandingVoteForCommIDAsync(SessionID, CommitteeID, null);
        }
        
        /// <remarks/>
        public void StandingVoteForCommIDAsync(int SessionID, int CommitteeID, object userState) {
            if ((this.StandingVoteForCommIDOperationCompleted == null)) {
                this.StandingVoteForCommIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStandingVoteForCommIDOperationCompleted);
            }
            this.InvokeAsync("StandingVoteForCommID", new object[] {
                        SessionID,
                        CommitteeID}, this.StandingVoteForCommIDOperationCompleted, userState);
        }
        
        private void OnStandingVoteForCommIDOperationCompleted(object arg) {
            if ((this.StandingVoteForCommIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StandingVoteForCommIDCompleted(this, new StandingVoteForCommIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/StandingVoteForCommIDOnDate", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode StandingVoteForCommIDOnDate(int SessionID, int CommitteeID, string OnDate) {
            object[] results = this.Invoke("StandingVoteForCommIDOnDate", new object[] {
                        SessionID,
                        CommitteeID,
                        OnDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void StandingVoteForCommIDOnDateAsync(int SessionID, int CommitteeID, string OnDate) {
            this.StandingVoteForCommIDOnDateAsync(SessionID, CommitteeID, OnDate, null);
        }
        
        /// <remarks/>
        public void StandingVoteForCommIDOnDateAsync(int SessionID, int CommitteeID, string OnDate, object userState) {
            if ((this.StandingVoteForCommIDOnDateOperationCompleted == null)) {
                this.StandingVoteForCommIDOnDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStandingVoteForCommIDOnDateOperationCompleted);
            }
            this.InvokeAsync("StandingVoteForCommIDOnDate", new object[] {
                        SessionID,
                        CommitteeID,
                        OnDate}, this.StandingVoteForCommIDOnDateOperationCompleted, userState);
        }
        
        private void OnStandingVoteForCommIDOnDateOperationCompleted(object arg) {
            if ((this.StandingVoteForCommIDOnDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StandingVoteForCommIDOnDateCompleted(this, new StandingVoteForCommIDOnDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/BillInfo", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode BillInfo(int SessionID, string BillNum) {
            object[] results = this.Invoke("BillInfo", new object[] {
                        SessionID,
                        BillNum});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void BillInfoAsync(int SessionID, string BillNum) {
            this.BillInfoAsync(SessionID, BillNum, null);
        }
        
        /// <remarks/>
        public void BillInfoAsync(int SessionID, string BillNum, object userState) {
            if ((this.BillInfoOperationCompleted == null)) {
                this.BillInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBillInfoOperationCompleted);
            }
            this.InvokeAsync("BillInfo", new object[] {
                        SessionID,
                        BillNum}, this.BillInfoOperationCompleted, userState);
        }
        
        private void OnBillInfoOperationCompleted(object arg) {
            if ((this.BillInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BillInfoCompleted(this, new BillInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/BillsBySessionID", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode BillsBySessionID(int SessionID) {
            object[] results = this.Invoke("BillsBySessionID", new object[] {
                        SessionID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void BillsBySessionIDAsync(int SessionID) {
            this.BillsBySessionIDAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void BillsBySessionIDAsync(int SessionID, object userState) {
            if ((this.BillsBySessionIDOperationCompleted == null)) {
                this.BillsBySessionIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBillsBySessionIDOperationCompleted);
            }
            this.InvokeAsync("BillsBySessionID", new object[] {
                        SessionID}, this.BillsBySessionIDOperationCompleted, userState);
        }
        
        private void OnBillsBySessionIDOperationCompleted(object arg) {
            if ((this.BillsBySessionIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BillsBySessionIDCompleted(this, new BillsBySessionIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/BillsUpdated", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode BillsUpdated(int SessionID, string UpdatedDate) {
            object[] results = this.Invoke("BillsUpdated", new object[] {
                        SessionID,
                        UpdatedDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void BillsUpdatedAsync(int SessionID, string UpdatedDate) {
            this.BillsUpdatedAsync(SessionID, UpdatedDate, null);
        }
        
        /// <remarks/>
        public void BillsUpdatedAsync(int SessionID, string UpdatedDate, object userState) {
            if ((this.BillsUpdatedOperationCompleted == null)) {
                this.BillsUpdatedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBillsUpdatedOperationCompleted);
            }
            this.InvokeAsync("BillsUpdated", new object[] {
                        SessionID,
                        UpdatedDate}, this.BillsUpdatedOperationCompleted, userState);
        }
        
        private void OnBillsUpdatedOperationCompleted(object arg) {
            if ((this.BillsUpdatedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BillsUpdatedCompleted(this, new BillsUpdatedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/SponsoredBills", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SponsoredBills(int SessionID, int MemberID) {
            object[] results = this.Invoke("SponsoredBills", new object[] {
                        SessionID,
                        MemberID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SponsoredBillsAsync(int SessionID, int MemberID) {
            this.SponsoredBillsAsync(SessionID, MemberID, null);
        }
        
        /// <remarks/>
        public void SponsoredBillsAsync(int SessionID, int MemberID, object userState) {
            if ((this.SponsoredBillsOperationCompleted == null)) {
                this.SponsoredBillsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSponsoredBillsOperationCompleted);
            }
            this.InvokeAsync("SponsoredBills", new object[] {
                        SessionID,
                        MemberID}, this.SponsoredBillsOperationCompleted, userState);
        }
        
        private void OnSponsoredBillsOperationCompleted(object arg) {
            if ((this.SponsoredBillsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SponsoredBillsCompleted(this, new SponsoredBillsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/AgendaBySessionID", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AgendaBySessionID(int SessionID) {
            object[] results = this.Invoke("AgendaBySessionID", new object[] {
                        SessionID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AgendaBySessionIDAsync(int SessionID) {
            this.AgendaBySessionIDAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void AgendaBySessionIDAsync(int SessionID, object userState) {
            if ((this.AgendaBySessionIDOperationCompleted == null)) {
                this.AgendaBySessionIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAgendaBySessionIDOperationCompleted);
            }
            this.InvokeAsync("AgendaBySessionID", new object[] {
                        SessionID}, this.AgendaBySessionIDOperationCompleted, userState);
        }
        
        private void OnAgendaBySessionIDOperationCompleted(object arg) {
            if ((this.AgendaBySessionIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AgendaBySessionIDCompleted(this, new AgendaBySessionIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/AgendaByCommitteeID", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AgendaByCommitteeID(int SessionID, int CommitteeID) {
            object[] results = this.Invoke("AgendaByCommitteeID", new object[] {
                        SessionID,
                        CommitteeID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AgendaByCommitteeIDAsync(int SessionID, int CommitteeID) {
            this.AgendaByCommitteeIDAsync(SessionID, CommitteeID, null);
        }
        
        /// <remarks/>
        public void AgendaByCommitteeIDAsync(int SessionID, int CommitteeID, object userState) {
            if ((this.AgendaByCommitteeIDOperationCompleted == null)) {
                this.AgendaByCommitteeIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAgendaByCommitteeIDOperationCompleted);
            }
            this.InvokeAsync("AgendaByCommitteeID", new object[] {
                        SessionID,
                        CommitteeID}, this.AgendaByCommitteeIDOperationCompleted, userState);
        }
        
        private void OnAgendaByCommitteeIDOperationCompleted(object arg) {
            if ((this.AgendaByCommitteeIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AgendaByCommitteeIDCompleted(this, new AgendaByCommitteeIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/AgendaByID", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AgendaByID(int AgendaID) {
            object[] results = this.Invoke("AgendaByID", new object[] {
                        AgendaID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AgendaByIDAsync(int AgendaID) {
            this.AgendaByIDAsync(AgendaID, null);
        }
        
        /// <remarks/>
        public void AgendaByIDAsync(int AgendaID, object userState) {
            if ((this.AgendaByIDOperationCompleted == null)) {
                this.AgendaByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAgendaByIDOperationCompleted);
            }
            this.InvokeAsync("AgendaByID", new object[] {
                        AgendaID}, this.AgendaByIDOperationCompleted, userState);
        }
        
        private void OnAgendaByIDOperationCompleted(object arg) {
            if ((this.AgendaByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AgendaByIDCompleted(this, new AgendaByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/AgendaByCommitteeIDFromDate", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AgendaByCommitteeIDFromDate(int SessionID, int CommitteeID, string StartDate) {
            object[] results = this.Invoke("AgendaByCommitteeIDFromDate", new object[] {
                        SessionID,
                        CommitteeID,
                        StartDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AgendaByCommitteeIDFromDateAsync(int SessionID, int CommitteeID, string StartDate) {
            this.AgendaByCommitteeIDFromDateAsync(SessionID, CommitteeID, StartDate, null);
        }
        
        /// <remarks/>
        public void AgendaByCommitteeIDFromDateAsync(int SessionID, int CommitteeID, string StartDate, object userState) {
            if ((this.AgendaByCommitteeIDFromDateOperationCompleted == null)) {
                this.AgendaByCommitteeIDFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAgendaByCommitteeIDFromDateOperationCompleted);
            }
            this.InvokeAsync("AgendaByCommitteeIDFromDate", new object[] {
                        SessionID,
                        CommitteeID,
                        StartDate}, this.AgendaByCommitteeIDFromDateOperationCompleted, userState);
        }
        
        private void OnAgendaByCommitteeIDFromDateOperationCompleted(object arg) {
            if ((this.AgendaByCommitteeIDFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AgendaByCommitteeIDFromDateCompleted(this, new AgendaByCommitteeIDFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/AgendaBySessionIDFromDate", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AgendaBySessionIDFromDate(int SessionID, string StartDate) {
            object[] results = this.Invoke("AgendaBySessionIDFromDate", new object[] {
                        SessionID,
                        StartDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AgendaBySessionIDFromDateAsync(int SessionID, string StartDate) {
            this.AgendaBySessionIDFromDateAsync(SessionID, StartDate, null);
        }
        
        /// <remarks/>
        public void AgendaBySessionIDFromDateAsync(int SessionID, string StartDate, object userState) {
            if ((this.AgendaBySessionIDFromDateOperationCompleted == null)) {
                this.AgendaBySessionIDFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAgendaBySessionIDFromDateOperationCompleted);
            }
            this.InvokeAsync("AgendaBySessionIDFromDate", new object[] {
                        SessionID,
                        StartDate}, this.AgendaBySessionIDFromDateOperationCompleted, userState);
        }
        
        private void OnAgendaBySessionIDFromDateOperationCompleted(object arg) {
            if ((this.AgendaBySessionIDFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AgendaBySessionIDFromDateCompleted(this, new AgendaBySessionIDFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/Sessions", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode Sessions() {
            object[] results = this.Invoke("Sessions", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SessionsAsync() {
            this.SessionsAsync(null);
        }
        
        /// <remarks/>
        public void SessionsAsync(object userState) {
            if ((this.SessionsOperationCompleted == null)) {
                this.SessionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSessionsOperationCompleted);
            }
            this.InvokeAsync("Sessions", new object[0], this.SessionsOperationCompleted, userState);
        }
        
        private void OnSessionsOperationCompleted(object arg) {
            if ((this.SessionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SessionsCompleted(this, new SessionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/SessionsbyID", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SessionsbyID(int SessionID) {
            object[] results = this.Invoke("SessionsbyID", new object[] {
                        SessionID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SessionsbyIDAsync(int SessionID) {
            this.SessionsbyIDAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void SessionsbyIDAsync(int SessionID, object userState) {
            if ((this.SessionsbyIDOperationCompleted == null)) {
                this.SessionsbyIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSessionsbyIDOperationCompleted);
            }
            this.InvokeAsync("SessionsbyID", new object[] {
                        SessionID}, this.SessionsbyIDOperationCompleted, userState);
        }
        
        private void OnSessionsbyIDOperationCompleted(object arg) {
            if ((this.SessionsbyIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SessionsbyIDCompleted(this, new SessionsbyIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/RequestToSpeakBySessionID", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode RequestToSpeakBySessionID(int SessionID) {
            object[] results = this.Invoke("RequestToSpeakBySessionID", new object[] {
                        SessionID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void RequestToSpeakBySessionIDAsync(int SessionID) {
            this.RequestToSpeakBySessionIDAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void RequestToSpeakBySessionIDAsync(int SessionID, object userState) {
            if ((this.RequestToSpeakBySessionIDOperationCompleted == null)) {
                this.RequestToSpeakBySessionIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestToSpeakBySessionIDOperationCompleted);
            }
            this.InvokeAsync("RequestToSpeakBySessionID", new object[] {
                        SessionID}, this.RequestToSpeakBySessionIDOperationCompleted, userState);
        }
        
        private void OnRequestToSpeakBySessionIDOperationCompleted(object arg) {
            if ((this.RequestToSpeakBySessionIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestToSpeakBySessionIDCompleted(this, new RequestToSpeakBySessionIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/RequestToSpeakBySessionIDFromDate", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode RequestToSpeakBySessionIDFromDate(int SessionID, string StartDate) {
            object[] results = this.Invoke("RequestToSpeakBySessionIDFromDate", new object[] {
                        SessionID,
                        StartDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void RequestToSpeakBySessionIDFromDateAsync(int SessionID, string StartDate) {
            this.RequestToSpeakBySessionIDFromDateAsync(SessionID, StartDate, null);
        }
        
        /// <remarks/>
        public void RequestToSpeakBySessionIDFromDateAsync(int SessionID, string StartDate, object userState) {
            if ((this.RequestToSpeakBySessionIDFromDateOperationCompleted == null)) {
                this.RequestToSpeakBySessionIDFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestToSpeakBySessionIDFromDateOperationCompleted);
            }
            this.InvokeAsync("RequestToSpeakBySessionIDFromDate", new object[] {
                        SessionID,
                        StartDate}, this.RequestToSpeakBySessionIDFromDateOperationCompleted, userState);
        }
        
        private void OnRequestToSpeakBySessionIDFromDateOperationCompleted(object arg) {
            if ((this.RequestToSpeakBySessionIDFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestToSpeakBySessionIDFromDateCompleted(this, new RequestToSpeakBySessionIDFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/RequestToSpeakBetweenDates", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode RequestToSpeakBetweenDates(int SessionID, string StartDate, string EndDate) {
            object[] results = this.Invoke("RequestToSpeakBetweenDates", new object[] {
                        SessionID,
                        StartDate,
                        EndDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void RequestToSpeakBetweenDatesAsync(int SessionID, string StartDate, string EndDate) {
            this.RequestToSpeakBetweenDatesAsync(SessionID, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void RequestToSpeakBetweenDatesAsync(int SessionID, string StartDate, string EndDate, object userState) {
            if ((this.RequestToSpeakBetweenDatesOperationCompleted == null)) {
                this.RequestToSpeakBetweenDatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestToSpeakBetweenDatesOperationCompleted);
            }
            this.InvokeAsync("RequestToSpeakBetweenDates", new object[] {
                        SessionID,
                        StartDate,
                        EndDate}, this.RequestToSpeakBetweenDatesOperationCompleted, userState);
        }
        
        private void OnRequestToSpeakBetweenDatesOperationCompleted(object arg) {
            if ((this.RequestToSpeakBetweenDatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestToSpeakBetweenDatesCompleted(this, new RequestToSpeakBetweenDatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/ForAgainstNeutralBySessionID", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ForAgainstNeutralBySessionID(int SessionID) {
            object[] results = this.Invoke("ForAgainstNeutralBySessionID", new object[] {
                        SessionID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ForAgainstNeutralBySessionIDAsync(int SessionID) {
            this.ForAgainstNeutralBySessionIDAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void ForAgainstNeutralBySessionIDAsync(int SessionID, object userState) {
            if ((this.ForAgainstNeutralBySessionIDOperationCompleted == null)) {
                this.ForAgainstNeutralBySessionIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnForAgainstNeutralBySessionIDOperationCompleted);
            }
            this.InvokeAsync("ForAgainstNeutralBySessionID", new object[] {
                        SessionID}, this.ForAgainstNeutralBySessionIDOperationCompleted, userState);
        }
        
        private void OnForAgainstNeutralBySessionIDOperationCompleted(object arg) {
            if ((this.ForAgainstNeutralBySessionIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ForAgainstNeutralBySessionIDCompleted(this, new ForAgainstNeutralBySessionIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/ForAgainstNeutralBySessionIDFromDate", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ForAgainstNeutralBySessionIDFromDate(int SessionID, string StartDate) {
            object[] results = this.Invoke("ForAgainstNeutralBySessionIDFromDate", new object[] {
                        SessionID,
                        StartDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ForAgainstNeutralBySessionIDFromDateAsync(int SessionID, string StartDate) {
            this.ForAgainstNeutralBySessionIDFromDateAsync(SessionID, StartDate, null);
        }
        
        /// <remarks/>
        public void ForAgainstNeutralBySessionIDFromDateAsync(int SessionID, string StartDate, object userState) {
            if ((this.ForAgainstNeutralBySessionIDFromDateOperationCompleted == null)) {
                this.ForAgainstNeutralBySessionIDFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnForAgainstNeutralBySessionIDFromDateOperationCompleted);
            }
            this.InvokeAsync("ForAgainstNeutralBySessionIDFromDate", new object[] {
                        SessionID,
                        StartDate}, this.ForAgainstNeutralBySessionIDFromDateOperationCompleted, userState);
        }
        
        private void OnForAgainstNeutralBySessionIDFromDateOperationCompleted(object arg) {
            if ((this.ForAgainstNeutralBySessionIDFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ForAgainstNeutralBySessionIDFromDateCompleted(this, new ForAgainstNeutralBySessionIDFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/ForAgainstNeutralBetweenDates", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ForAgainstNeutralBetweenDates(int SessionID, string StartDate, string EndDate) {
            object[] results = this.Invoke("ForAgainstNeutralBetweenDates", new object[] {
                        SessionID,
                        StartDate,
                        EndDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ForAgainstNeutralBetweenDatesAsync(int SessionID, string StartDate, string EndDate) {
            this.ForAgainstNeutralBetweenDatesAsync(SessionID, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void ForAgainstNeutralBetweenDatesAsync(int SessionID, string StartDate, string EndDate, object userState) {
            if ((this.ForAgainstNeutralBetweenDatesOperationCompleted == null)) {
                this.ForAgainstNeutralBetweenDatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnForAgainstNeutralBetweenDatesOperationCompleted);
            }
            this.InvokeAsync("ForAgainstNeutralBetweenDates", new object[] {
                        SessionID,
                        StartDate,
                        EndDate}, this.ForAgainstNeutralBetweenDatesOperationCompleted, userState);
        }
        
        private void OnForAgainstNeutralBetweenDatesOperationCompleted(object arg) {
            if ((this.ForAgainstNeutralBetweenDatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ForAgainstNeutralBetweenDatesCompleted(this, new ForAgainstNeutralBetweenDatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/MembersBySessionID", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode MembersBySessionID(int SessionID) {
            object[] results = this.Invoke("MembersBySessionID", new object[] {
                        SessionID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void MembersBySessionIDAsync(int SessionID) {
            this.MembersBySessionIDAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void MembersBySessionIDAsync(int SessionID, object userState) {
            if ((this.MembersBySessionIDOperationCompleted == null)) {
                this.MembersBySessionIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMembersBySessionIDOperationCompleted);
            }
            this.InvokeAsync("MembersBySessionID", new object[] {
                        SessionID}, this.MembersBySessionIDOperationCompleted, userState);
        }
        
        private void OnMembersBySessionIDOperationCompleted(object arg) {
            if ((this.MembersBySessionIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MembersBySessionIDCompleted(this, new MembersBySessionIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/MemberByID", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode MemberByID(int SessionID, int MemberID) {
            object[] results = this.Invoke("MemberByID", new object[] {
                        SessionID,
                        MemberID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void MemberByIDAsync(int SessionID, int MemberID) {
            this.MemberByIDAsync(SessionID, MemberID, null);
        }
        
        /// <remarks/>
        public void MemberByIDAsync(int SessionID, int MemberID, object userState) {
            if ((this.MemberByIDOperationCompleted == null)) {
                this.MemberByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMemberByIDOperationCompleted);
            }
            this.InvokeAsync("MemberByID", new object[] {
                        SessionID,
                        MemberID}, this.MemberByIDOperationCompleted, userState);
        }
        
        private void OnMemberByIDOperationCompleted(object arg) {
            if ((this.MemberByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MemberByIDCompleted(this, new MemberByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/CalendarsBySessionID", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CalendarsBySessionID(int SessionID) {
            object[] results = this.Invoke("CalendarsBySessionID", new object[] {
                        SessionID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CalendarsBySessionIDAsync(int SessionID) {
            this.CalendarsBySessionIDAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void CalendarsBySessionIDAsync(int SessionID, object userState) {
            if ((this.CalendarsBySessionIDOperationCompleted == null)) {
                this.CalendarsBySessionIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalendarsBySessionIDOperationCompleted);
            }
            this.InvokeAsync("CalendarsBySessionID", new object[] {
                        SessionID}, this.CalendarsBySessionIDOperationCompleted, userState);
        }
        
        private void OnCalendarsBySessionIDOperationCompleted(object arg) {
            if ((this.CalendarsBySessionIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalendarsBySessionIDCompleted(this, new CalendarsBySessionIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/CalendarsByCommittee", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CalendarsByCommittee(int SessionID, int CommitteeID) {
            object[] results = this.Invoke("CalendarsByCommittee", new object[] {
                        SessionID,
                        CommitteeID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CalendarsByCommitteeAsync(int SessionID, int CommitteeID) {
            this.CalendarsByCommitteeAsync(SessionID, CommitteeID, null);
        }
        
        /// <remarks/>
        public void CalendarsByCommitteeAsync(int SessionID, int CommitteeID, object userState) {
            if ((this.CalendarsByCommitteeOperationCompleted == null)) {
                this.CalendarsByCommitteeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalendarsByCommitteeOperationCompleted);
            }
            this.InvokeAsync("CalendarsByCommittee", new object[] {
                        SessionID,
                        CommitteeID}, this.CalendarsByCommitteeOperationCompleted, userState);
        }
        
        private void OnCalendarsByCommitteeOperationCompleted(object arg) {
            if ((this.CalendarsByCommitteeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalendarsByCommitteeCompleted(this, new CalendarsByCommitteeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/CalendarsByBody", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CalendarsByBody(int SessionID, string Body) {
            object[] results = this.Invoke("CalendarsByBody", new object[] {
                        SessionID,
                        Body});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CalendarsByBodyAsync(int SessionID, string Body) {
            this.CalendarsByBodyAsync(SessionID, Body, null);
        }
        
        /// <remarks/>
        public void CalendarsByBodyAsync(int SessionID, string Body, object userState) {
            if ((this.CalendarsByBodyOperationCompleted == null)) {
                this.CalendarsByBodyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalendarsByBodyOperationCompleted);
            }
            this.InvokeAsync("CalendarsByBody", new object[] {
                        SessionID,
                        Body}, this.CalendarsByBodyOperationCompleted, userState);
        }
        
        private void OnCalendarsByBodyOperationCompleted(object arg) {
            if ((this.CalendarsByBodyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalendarsByBodyCompleted(this, new CalendarsByBodyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/CalendarsFromDate", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CalendarsFromDate(int SessionID, string StartDate) {
            object[] results = this.Invoke("CalendarsFromDate", new object[] {
                        SessionID,
                        StartDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CalendarsFromDateAsync(int SessionID, string StartDate) {
            this.CalendarsFromDateAsync(SessionID, StartDate, null);
        }
        
        /// <remarks/>
        public void CalendarsFromDateAsync(int SessionID, string StartDate, object userState) {
            if ((this.CalendarsFromDateOperationCompleted == null)) {
                this.CalendarsFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalendarsFromDateOperationCompleted);
            }
            this.InvokeAsync("CalendarsFromDate", new object[] {
                        SessionID,
                        StartDate}, this.CalendarsFromDateOperationCompleted, userState);
        }
        
        private void OnCalendarsFromDateOperationCompleted(object arg) {
            if ((this.CalendarsFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalendarsFromDateCompleted(this, new CalendarsFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/CalendarsByCalendarID", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CalendarsByCalendarID(int CalendarID) {
            object[] results = this.Invoke("CalendarsByCalendarID", new object[] {
                        CalendarID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CalendarsByCalendarIDAsync(int CalendarID) {
            this.CalendarsByCalendarIDAsync(CalendarID, null);
        }
        
        /// <remarks/>
        public void CalendarsByCalendarIDAsync(int CalendarID, object userState) {
            if ((this.CalendarsByCalendarIDOperationCompleted == null)) {
                this.CalendarsByCalendarIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalendarsByCalendarIDOperationCompleted);
            }
            this.InvokeAsync("CalendarsByCalendarID", new object[] {
                        CalendarID}, this.CalendarsByCalendarIDOperationCompleted, userState);
        }
        
        private void OnCalendarsByCalendarIDOperationCompleted(object arg) {
            if ((this.CalendarsByCalendarIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalendarsByCalendarIDCompleted(this, new CalendarsByCalendarIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/DocumentsBySessionID", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DocumentsBySessionID(int SessionID) {
            object[] results = this.Invoke("DocumentsBySessionID", new object[] {
                        SessionID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void DocumentsBySessionIDAsync(int SessionID) {
            this.DocumentsBySessionIDAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void DocumentsBySessionIDAsync(int SessionID, object userState) {
            if ((this.DocumentsBySessionIDOperationCompleted == null)) {
                this.DocumentsBySessionIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDocumentsBySessionIDOperationCompleted);
            }
            this.InvokeAsync("DocumentsBySessionID", new object[] {
                        SessionID}, this.DocumentsBySessionIDOperationCompleted, userState);
        }
        
        private void OnDocumentsBySessionIDOperationCompleted(object arg) {
            if ((this.DocumentsBySessionIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DocumentsBySessionIDCompleted(this, new DocumentsBySessionIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/DocumentsByBillNum", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DocumentsByBillNum(int SessionID, string BillNum) {
            object[] results = this.Invoke("DocumentsByBillNum", new object[] {
                        SessionID,
                        BillNum});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void DocumentsByBillNumAsync(int SessionID, string BillNum) {
            this.DocumentsByBillNumAsync(SessionID, BillNum, null);
        }
        
        /// <remarks/>
        public void DocumentsByBillNumAsync(int SessionID, string BillNum, object userState) {
            if ((this.DocumentsByBillNumOperationCompleted == null)) {
                this.DocumentsByBillNumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDocumentsByBillNumOperationCompleted);
            }
            this.InvokeAsync("DocumentsByBillNum", new object[] {
                        SessionID,
                        BillNum}, this.DocumentsByBillNumOperationCompleted, userState);
        }
        
        private void OnDocumentsByBillNumOperationCompleted(object arg) {
            if ((this.DocumentsByBillNumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DocumentsByBillNumCompleted(this, new DocumentsByBillNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/DocumentsByBillNumFromDate", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DocumentsByBillNumFromDate(int SessionID, string BillNum, string StartDate) {
            object[] results = this.Invoke("DocumentsByBillNumFromDate", new object[] {
                        SessionID,
                        BillNum,
                        StartDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void DocumentsByBillNumFromDateAsync(int SessionID, string BillNum, string StartDate) {
            this.DocumentsByBillNumFromDateAsync(SessionID, BillNum, StartDate, null);
        }
        
        /// <remarks/>
        public void DocumentsByBillNumFromDateAsync(int SessionID, string BillNum, string StartDate, object userState) {
            if ((this.DocumentsByBillNumFromDateOperationCompleted == null)) {
                this.DocumentsByBillNumFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDocumentsByBillNumFromDateOperationCompleted);
            }
            this.InvokeAsync("DocumentsByBillNumFromDate", new object[] {
                        SessionID,
                        BillNum,
                        StartDate}, this.DocumentsByBillNumFromDateOperationCompleted, userState);
        }
        
        private void OnDocumentsByBillNumFromDateOperationCompleted(object arg) {
            if ((this.DocumentsByBillNumFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DocumentsByBillNumFromDateCompleted(this, new DocumentsByBillNumFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/DocumentsFromDate", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DocumentsFromDate(int SessionID, string StartDate) {
            object[] results = this.Invoke("DocumentsFromDate", new object[] {
                        SessionID,
                        StartDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void DocumentsFromDateAsync(int SessionID, string StartDate) {
            this.DocumentsFromDateAsync(SessionID, StartDate, null);
        }
        
        /// <remarks/>
        public void DocumentsFromDateAsync(int SessionID, string StartDate, object userState) {
            if ((this.DocumentsFromDateOperationCompleted == null)) {
                this.DocumentsFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDocumentsFromDateOperationCompleted);
            }
            this.InvokeAsync("DocumentsFromDate", new object[] {
                        SessionID,
                        StartDate}, this.DocumentsFromDateOperationCompleted, userState);
        }
        
        private void OnDocumentsFromDateOperationCompleted(object arg) {
            if ((this.DocumentsFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DocumentsFromDateCompleted(this, new DocumentsFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/DocumentsFromDateToDate", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DocumentsFromDateToDate(int SessionID, string StartDate, string EndDate) {
            object[] results = this.Invoke("DocumentsFromDateToDate", new object[] {
                        SessionID,
                        StartDate,
                        EndDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void DocumentsFromDateToDateAsync(int SessionID, string StartDate, string EndDate) {
            this.DocumentsFromDateToDateAsync(SessionID, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void DocumentsFromDateToDateAsync(int SessionID, string StartDate, string EndDate, object userState) {
            if ((this.DocumentsFromDateToDateOperationCompleted == null)) {
                this.DocumentsFromDateToDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDocumentsFromDateToDateOperationCompleted);
            }
            this.InvokeAsync("DocumentsFromDateToDate", new object[] {
                        SessionID,
                        StartDate,
                        EndDate}, this.DocumentsFromDateToDateOperationCompleted, userState);
        }
        
        private void OnDocumentsFromDateToDateOperationCompleted(object arg) {
            if ((this.DocumentsFromDateToDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DocumentsFromDateToDateCompleted(this, new DocumentsFromDateToDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/DocumentsByDocType", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DocumentsByDocType(int SessionID, string DocType) {
            object[] results = this.Invoke("DocumentsByDocType", new object[] {
                        SessionID,
                        DocType});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void DocumentsByDocTypeAsync(int SessionID, string DocType) {
            this.DocumentsByDocTypeAsync(SessionID, DocType, null);
        }
        
        /// <remarks/>
        public void DocumentsByDocTypeAsync(int SessionID, string DocType, object userState) {
            if ((this.DocumentsByDocTypeOperationCompleted == null)) {
                this.DocumentsByDocTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDocumentsByDocTypeOperationCompleted);
            }
            this.InvokeAsync("DocumentsByDocType", new object[] {
                        SessionID,
                        DocType}, this.DocumentsByDocTypeOperationCompleted, userState);
        }
        
        private void OnDocumentsByDocTypeOperationCompleted(object arg) {
            if ((this.DocumentsByDocTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DocumentsByDocTypeCompleted(this, new DocumentsByDocTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/DocumentsByBillNumDocType", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DocumentsByBillNumDocType(int SessionID, string BillNum, string DocType) {
            object[] results = this.Invoke("DocumentsByBillNumDocType", new object[] {
                        SessionID,
                        BillNum,
                        DocType});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void DocumentsByBillNumDocTypeAsync(int SessionID, string BillNum, string DocType) {
            this.DocumentsByBillNumDocTypeAsync(SessionID, BillNum, DocType, null);
        }
        
        /// <remarks/>
        public void DocumentsByBillNumDocTypeAsync(int SessionID, string BillNum, string DocType, object userState) {
            if ((this.DocumentsByBillNumDocTypeOperationCompleted == null)) {
                this.DocumentsByBillNumDocTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDocumentsByBillNumDocTypeOperationCompleted);
            }
            this.InvokeAsync("DocumentsByBillNumDocType", new object[] {
                        SessionID,
                        BillNum,
                        DocType}, this.DocumentsByBillNumDocTypeOperationCompleted, userState);
        }
        
        private void OnDocumentsByBillNumDocTypeOperationCompleted(object arg) {
            if ((this.DocumentsByBillNumDocTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DocumentsByBillNumDocTypeCompleted(this, new DocumentsByBillNumDocTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SOAPLegServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://azleg.gov/webservices/ARS", RequestNamespace="http://azleg.gov/webservices/", ResponseNamespace="http://azleg.gov/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ARS() {
            object[] results = this.Invoke("ARS", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ARSAsync() {
            this.ARSAsync(null);
        }
        
        /// <remarks/>
        public void ARSAsync(object userState) {
            if ((this.ARSOperationCompleted == null)) {
                this.ARSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnARSOperationCompleted);
            }
            this.InvokeAsync("ARS", new object[0], this.ARSOperationCompleted, userState);
        }
        
        private void OnARSOperationCompleted(object arg) {
            if ((this.ARSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ARSCompleted(this, new ARSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://azleg.gov/webservices/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://azleg.gov/webservices/", IsNullable=false)]
    public partial class SOAPLegServiceHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string userNameField;
        
        private string passwordField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CommitteeActionsQualifiedCompletedEventHandler(object sender, CommitteeActionsQualifiedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitteeActionsQualifiedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitteeActionsQualifiedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CommitteeActionsCompletedEventHandler(object sender, CommitteeActionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitteeActionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitteeActionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CommitteeByLegislatureCompletedEventHandler(object sender, CommitteeByLegislatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitteeByLegislatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitteeByLegislatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CommitteeByLegBodyCompletedEventHandler(object sender, CommitteeByLegBodyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitteeByLegBodyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitteeByLegBodyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CommitteeByLegTypeCompletedEventHandler(object sender, CommitteeByLegTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitteeByLegTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitteeByLegTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CommitteeByLegTypeBodyCompletedEventHandler(object sender, CommitteeByLegTypeBodyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitteeByLegTypeBodyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitteeByLegTypeBodyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CommitteeByLegIDCompletedEventHandler(object sender, CommitteeByLegIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitteeByLegIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitteeByLegIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CommitteeMembersCompletedEventHandler(object sender, CommitteeMembersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitteeMembersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitteeMembersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MemberCommitteesCompletedEventHandler(object sender, MemberCommitteesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MemberCommitteesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MemberCommitteesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void FloorVotesBySessionIDCompletedEventHandler(object sender, FloorVotesBySessionIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FloorVotesBySessionIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FloorVotesBySessionIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void FloorVotesByBillCompletedEventHandler(object sender, FloorVotesByBillCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FloorVotesByBillCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FloorVotesByBillCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void FloorVotesFromDateCompletedEventHandler(object sender, FloorVotesFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FloorVotesFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FloorVotesFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void FloorVotesFromDateToDateCompletedEventHandler(object sender, FloorVotesFromDateToDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FloorVotesFromDateToDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FloorVotesFromDateToDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void FloorVotesByCommIDCompletedEventHandler(object sender, FloorVotesByCommIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FloorVotesByCommIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FloorVotesByCommIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void FloorVotesByBillFromDateCompletedEventHandler(object sender, FloorVotesByBillFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FloorVotesByBillFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FloorVotesByBillFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void StandingBySessionIDCompletedEventHandler(object sender, StandingBySessionIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StandingBySessionIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StandingBySessionIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void StandingByCommitteeCompletedEventHandler(object sender, StandingByCommitteeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StandingByCommitteeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StandingByCommitteeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void StandingByBillNumCompletedEventHandler(object sender, StandingByBillNumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StandingByBillNumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StandingByBillNumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void StandingFromDateCompletedEventHandler(object sender, StandingFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StandingFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StandingFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void StandingByCommFromDateCompletedEventHandler(object sender, StandingByCommFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StandingByCommFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StandingByCommFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void StandingVoteFromDateCompletedEventHandler(object sender, StandingVoteFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StandingVoteFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StandingVoteFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void StandingVoteFromDateToDateCompletedEventHandler(object sender, StandingVoteFromDateToDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StandingVoteFromDateToDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StandingVoteFromDateToDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void StandingVoteForBillNumCompletedEventHandler(object sender, StandingVoteForBillNumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StandingVoteForBillNumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StandingVoteForBillNumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void StandingVoteForCommIDCompletedEventHandler(object sender, StandingVoteForCommIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StandingVoteForCommIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StandingVoteForCommIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void StandingVoteForCommIDOnDateCompletedEventHandler(object sender, StandingVoteForCommIDOnDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StandingVoteForCommIDOnDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StandingVoteForCommIDOnDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void BillInfoCompletedEventHandler(object sender, BillInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BillInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BillInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void BillsBySessionIDCompletedEventHandler(object sender, BillsBySessionIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BillsBySessionIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BillsBySessionIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void BillsUpdatedCompletedEventHandler(object sender, BillsUpdatedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BillsUpdatedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BillsUpdatedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SponsoredBillsCompletedEventHandler(object sender, SponsoredBillsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SponsoredBillsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SponsoredBillsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void AgendaBySessionIDCompletedEventHandler(object sender, AgendaBySessionIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AgendaBySessionIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AgendaBySessionIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void AgendaByCommitteeIDCompletedEventHandler(object sender, AgendaByCommitteeIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AgendaByCommitteeIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AgendaByCommitteeIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void AgendaByIDCompletedEventHandler(object sender, AgendaByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AgendaByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AgendaByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void AgendaByCommitteeIDFromDateCompletedEventHandler(object sender, AgendaByCommitteeIDFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AgendaByCommitteeIDFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AgendaByCommitteeIDFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void AgendaBySessionIDFromDateCompletedEventHandler(object sender, AgendaBySessionIDFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AgendaBySessionIDFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AgendaBySessionIDFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SessionsCompletedEventHandler(object sender, SessionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SessionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SessionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SessionsbyIDCompletedEventHandler(object sender, SessionsbyIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SessionsbyIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SessionsbyIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void RequestToSpeakBySessionIDCompletedEventHandler(object sender, RequestToSpeakBySessionIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestToSpeakBySessionIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestToSpeakBySessionIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void RequestToSpeakBySessionIDFromDateCompletedEventHandler(object sender, RequestToSpeakBySessionIDFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestToSpeakBySessionIDFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestToSpeakBySessionIDFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void RequestToSpeakBetweenDatesCompletedEventHandler(object sender, RequestToSpeakBetweenDatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestToSpeakBetweenDatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestToSpeakBetweenDatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ForAgainstNeutralBySessionIDCompletedEventHandler(object sender, ForAgainstNeutralBySessionIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ForAgainstNeutralBySessionIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ForAgainstNeutralBySessionIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ForAgainstNeutralBySessionIDFromDateCompletedEventHandler(object sender, ForAgainstNeutralBySessionIDFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ForAgainstNeutralBySessionIDFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ForAgainstNeutralBySessionIDFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ForAgainstNeutralBetweenDatesCompletedEventHandler(object sender, ForAgainstNeutralBetweenDatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ForAgainstNeutralBetweenDatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ForAgainstNeutralBetweenDatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MembersBySessionIDCompletedEventHandler(object sender, MembersBySessionIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MembersBySessionIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MembersBySessionIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MemberByIDCompletedEventHandler(object sender, MemberByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MemberByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MemberByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CalendarsBySessionIDCompletedEventHandler(object sender, CalendarsBySessionIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalendarsBySessionIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalendarsBySessionIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CalendarsByCommitteeCompletedEventHandler(object sender, CalendarsByCommitteeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalendarsByCommitteeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalendarsByCommitteeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CalendarsByBodyCompletedEventHandler(object sender, CalendarsByBodyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalendarsByBodyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalendarsByBodyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CalendarsFromDateCompletedEventHandler(object sender, CalendarsFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalendarsFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalendarsFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CalendarsByCalendarIDCompletedEventHandler(object sender, CalendarsByCalendarIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalendarsByCalendarIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalendarsByCalendarIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DocumentsBySessionIDCompletedEventHandler(object sender, DocumentsBySessionIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DocumentsBySessionIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DocumentsBySessionIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DocumentsByBillNumCompletedEventHandler(object sender, DocumentsByBillNumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DocumentsByBillNumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DocumentsByBillNumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DocumentsByBillNumFromDateCompletedEventHandler(object sender, DocumentsByBillNumFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DocumentsByBillNumFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DocumentsByBillNumFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DocumentsFromDateCompletedEventHandler(object sender, DocumentsFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DocumentsFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DocumentsFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DocumentsFromDateToDateCompletedEventHandler(object sender, DocumentsFromDateToDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DocumentsFromDateToDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DocumentsFromDateToDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DocumentsByDocTypeCompletedEventHandler(object sender, DocumentsByDocTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DocumentsByDocTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DocumentsByDocTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DocumentsByBillNumDocTypeCompletedEventHandler(object sender, DocumentsByBillNumDocTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DocumentsByBillNumDocTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DocumentsByBillNumDocTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ARSCompletedEventHandler(object sender, ARSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ARSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ARSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591